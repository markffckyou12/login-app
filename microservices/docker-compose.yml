version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: microservices-postgres
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: microservices_user
      POSTGRES_PASSWORD: microservices_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U microservices_user -d microservices_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: microservices-api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      USER_SERVICE_URL: http://user-service:3001
      AUTH_SERVICE_URL: http://auth-service:3002
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: ${CLIENT_URL:-http://localhost:5174}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: microservices-user-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://microservices_user:microservices_password@postgres:5432/microservices_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: ${CLIENT_URL:-http://localhost:5174}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: microservices-auth-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://microservices_user:microservices_password@postgres:5432/microservices_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: ${CLIENT_URL:-http://localhost:5174}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - microservices-network

volumes:
  postgres_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge 